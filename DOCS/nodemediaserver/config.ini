# 0-关闭, 1-开启, #-文本注释, ;-参数注释, 密码不要使用 #和; 在配置中会忽略

[common]
# 授权码，程序运行后，将Machine ID值发给客服进行授权
license       = 
# http_api 是否开启http_api功能, 需要开启http或https服务
http_api      = 1
# admin_panel 是否开启后台管理面板, 会自动开启http_api,但需要开启http或https服务
admin_panel   = 1
# notify_url 当流创建和结束时以POST方式通知到该url，参数将以json body传递,当通知创建时返回非200状态码，将中断该流
# 如 http://192.168.0.6:8008/notify
; notify_url    = http://192.168.0.5:8080/api/notify
# notify_method 可以配置通知采用那种方式, 默认是post, 可改为get, 参数将通过url传递
notify_method = post
# gop_cache 是否开启gop_cache
# 该功能缓存最近的一段以关键帧开始的视频，使客户端能立刻开始解码秒开画面。
# 但在服务端有大量推流时需要更多的内存, 根据 码率/8×原视频关键帧间隔×推流数来计算。
gop_cache     = 1
# web_root 静态访问
web_root      = ./html
# ondemand_mode 按需模式, 开启后flv,kmp,fmp4协议在需要时才进行转换
# 提升大并发推流性能,避免空转
# 如果只使用rtmp协议, 或者做转发服务也可以打开
# 只会影响第一次该协议播放客户端的首屏打开速度
ondemand_mode = 0

[log]
# trace, debug, info, warn, error
log_level  = debug
# console or real log file path like ./log/debug.log
# linux系统以systemd启动, 设置为console也可直接使用系统提供的日志记录
# journalctl -u nms --since "2022-03-15"
# journalctl -f -u nms
log_file   = console
# log max day
log_maxday = 7
# 记录推流拉流事件到数据库,并可通过web管理后台或API查询.最多保留log_maxday的记录数
log_todb = 0

[av]
# ==================== 实时音频转码 ====================
# 是否开启自动音频转码
# RTMP/FLV/KMP/HLS协议播放时, 自动转其它音频编码为AAC
transcode_audio = 1
# 音频自动转码规则, 匹配后才转码, 多个规则用 | 分割, */* 则全转码
transcode_rule = */*

# ==================== 推流音视频内容加密 ====================
# 视频加密后,rtmp/kmp/http-flv/websocket-flv/http-fmp4协议支持, HLS协议不支持
# 支持开启transcode_audio后转码为AAC的流
# 16字节密码,任意字符串 如 qwerty1234567890
crypto_key      = 
# 对哪些流进行加密的规则, app_name/stream_name , 可以用*通配 , 多个规则用|分隔
# 默认为 */* 表示所有推流都加密, live/* 则表示只有 app_name为live时才加密
# 客户端只能使用NodeMediaClient-Android/iOS/Windows, NodePlayer.js 解密播放
crypto_rule     = */*

# ==================== 推流截图 ====================
# 截图保存路径
; screenshot_path     = ./screenshot
# 截图文件名类型,默认不设置则可通过流名称直接访问截图
# http://server_ip:8000/screenshot/live/stream.jpg
# 截图http访问地址中 /screenshot/ 开头为固定地址,非存储路径
# 也可设置为time按截图时间保存所有截图
; screenshot_suffix   = time
# 截图间隔时长，s,m,h,d
; screenshot_interval = 1m

# ==================== 推流录像 ====================
# record_path 录像保存路径, 不设置则不开启录像
; record_path     = ./record
# record_rule 录像匹配规则， 默认 */* 全部流录像， live/* live下的流才录像, 多个规则 | 分割
record_rule     = */*
# record_maxtime 最大单个录像时长 m,h,d, 不设置则不分段. 当录像类型设为hls做DVR录像时, 默认值为1m(既1分钟创建一个ts文件)
; record_maxtime  = 1h
# record_filetype 录像文件格式,可选mp4, fmp4, mkv, ts, flv, hls
# 录制开始和结束时会发送notify(postRecord,doneRecord)，用于记录录制的文件名, 录像后可通过http访问
# http://server_ip:8000/record/live/stream/2020-07-12/10-51-25.mp4
# http://server_ip:8000/record/live/stream/2020-07-12/10-51-25.mkv
# http://server_ip:8000/record/live/stream/2020-07-12/10-51-25.ts
# http://server_ip:8000/record/live/stream/2020-07-12/10-51-25.flv
# 当录制类型为hls时, 用于DVR全天录像, 每日创建一个文件夹, 每日生成一个索引文件, 播放地址为
# http://server_ip:8000/record/live/stream/2020-07-12/index.m3u8
# 也可以对当日某个时间段进行索引,如:开始时间09:30结束时间11:40,播放地址为
# http://server_ip:8000/record/live/stream/2020-07-12/vod.m3u8?start=0930&end=1140
# 时间段索引也可以只传当日的开始时间
# 录像http访问地址中 /record/ 开头为固定地址,非存储路径
record_filetype = mp4
# record_quota 录制目录磁盘配额,超过一定阈值则开始自动删除最早的日期目录. 
# 可以设置为配额大小如 500G, 1T  当设置为值类型, 按存储目录大小进行计算
# 也可以设置为百分比如 90%,   当设置为百分比类型, 按存储目录所在硬盘大小进行计算, windows则所在盘符大小计算
# 如果不设置, 则不进行删除以便自行进行磁盘维护.
; record_quota = 90%

# ==================== 实时转码\加水印 ====================
# ffmpeg路径
ffmpeg_binpath = /usr/local/bin/ffmpeg
# ffmpeg日志等级
ffmpeg_loglevel = 16
# 实时多分辨率转码模板文件路径, json格式, 注释则关闭
; fission_template = ./fission.json

[auth]
# 鉴权密码，鉴权码生成规则
# 原地址 rtmp://192.168.0.8/live/stream
# 加密算法 先获取有效期时间戳（当前时间+30秒过期）1574318274, md5(/live/stream-1574318274-authkey@2019)
# 最终地址 rtmp://192.168.0.8/live/stream?sign=1574318274-5a1ee174233631793a4091badf4ffec5
# 播放地址 http-flv http-fmp4 hls等有后缀的流地址也只传流名称,不要加(.flv, .mp4, .m3u8).
# 访问地址在线生成器: https://cdn.nodemedia.cn/nms-url-sign/index.html
auth_key      = authkey@2019
# 是否开启播放鉴权
auth_play     = 0
# 是否开启推流鉴权
auth_push     = 0
# 鉴权验证只可使用一次
auth_once    = 0
# 是否开启API鉴权, 打开后所有api调用需要设置header['authorization'] = login成功后返回的token
auth_api      = 1
# API鉴权用户名，login时以json格式提交
# {
# "username": "admin",
# "password": "21232f297a57a5a743894a0e4a801fc3"
# }
auth_api_user = admin
# API鉴权密码，login时需要传md5后的值, 默认密码为弱口令, 请注意修改
auth_api_pass = admin
# auth_domain 验证域名,开启后,只有使用该域名推流拉流才被允许,多个以|分隔
auth_domain   = 
# auth_nme 通过nme进行平台注册的密码验证
auth_nme      = 123456
# auth_allow_rule 设置后, 仅匹配规则的流名称允许推流. 多条规则用|分割, 可以设置 live/* | game/*
auth_allow_rule = 

[rtmp]
# rtmp协议端口(TCP)
port       = 1935

# rtmps协议端口(TCP)
# 还需要配置https项的key_file和cert_file
# obs推流rtmps会验证ssl证书,请正确配置推流域名证书
# ffmpeg/fplay/libav* 不验证ssl证书
; sport      = 1936

# rtmp协议chunk size
chunk_size = 60000

# enhanced_rule 为匹配规则的流使用enhanced_rtmp标准进行播放
# 此参数只影响播放时,服务端发送的标准.
# NodeMediaServer 同时兼容flv_extension_id标准推流和enhanced_rtmp标准推流
# 默认为关闭状态,所有播放的流按模式,扩展 h265_flv_id=12, av1_flv_id=13
# https://github.com/veovera/enhanced-rtmp
; enhanced_rule = */*

[http]
# http-flv/websocket-flv/http-fmp4/hls 协议端口(TCP)
# API接口, AdminPanel复用该端口
port = 8000
# add_header 添加自定义http头,用于特殊场景的需要.   | 分开多条设定. 
# NMS默认Access-Control-Allow-Origin为*, 在此设置后可覆盖设定做防盗链
# add_header = Cross-Origin-Opener-Policy: same-origin | Cross-Origin-Embedder-Policy: require-corp

# allow_none_referer 是否允许空referer访问flv,fmp4流
allow_none_referer = 1

[https]
# https-flv/wss-flv/https-fmp4/hls 协议端口(TCP)
# nme设备注册端口(TCP)
# webrtc 信令端口(TCP)
# webrtc rtp/rtcp 媒体传输复用端口(UDP)
port      = 8443
key_file  = key.pem
cert_file = cert.pem

[hls]
# hls_path 切片临时存放路径, 必须填入有效且可写入的路径. 若不设置路径, 则不会开启hls服务\生成hls切片
; hls_path = hls
# hls_time 切片时间, 单位秒, 默认2
# 经过这段时间后,将在下一个关键帧上剪切片段. 并不代表肯定会以这个设定值而切片,还要根据关键帧间隔而定.
# 低切片可有效降低hls延迟, 但也需要推流端使用固定的低关键帧间隔编码, 如果不固定关键帧间隔,会造成视频卡顿
hls_time = 2
# hls_list 最大播放条目, 默认3
hls_list = 3
# hls_allow_cache 显式设置客户端是否缓存媒体段。
hls_allow_cache = 0

[kmp]
# kmp协议端口(UDP)
port = 6935

[jt1078]
# JT1078 流媒体服务, 无信令控制.
# 用户需自行实现JT808, 配置设备ip和端口后, 本服务即可接收音视频流
# jt1078 子码率配置端口
; sub_port   = 6660
# jt1078 主码流配置端口
; main_port  = 6661
# jt1078 单音频监听流配置端口
; audio_port = 6662

[gb28181]
# GB28181 直播服务, 只做实时视频上云, 无录像调用\无云台控制\无级联\无对讲
# 填写服务器的公网ip,打开sip_port和rtp_port后开启服务
# sip_id SIP服务器ID
sip_id     = 34020000002000000001
# sip_domain SIP服务器域
sip_domain = 3402000000
# sip_pass  SIP服务器认证密码
sip_pass   = 123456
# sip_ip SIP服务器地址,服务器的公网\内外ip, 此项为必填项, 不设置则不启动服务
sip_ip   =
# sip_port  SIP服务器端口,UDP
sip_port = 5060
# rtp_port  RTP服务器复用端口,UDP
rtp_port = 5080
# jitter_delay 抗抖动延迟,单位毫秒. 如果丢帧严重, 加大该值可改善乱序包造成的花屏.
# 只在rtp 通过 udp传输时才需要
jitter_delay = 200

[srt]
# srt协议服务,基于可靠udp低延迟传输,较强的弱网传输能力,可配置密码进行AES传输加密
# NMS-windows端暂不支持srt服务
# 用于无人机,编码器和OBS推流,流地址格式:
# srt://192.168.0.4:9000?streamid=h=192.168.0.4,r=/live/srt1,m=publish
# 对应rtmp地址 rtmp://192.168.0.4/live/srt1
# srt流地址鉴权格式:
# srt://192.168.0.4:9000?streamid=h=192.168.0.4,r=/live/srt1,m=publish,sign=1645847336-e6207f97b84246dd64c18b7cd6ae015e

# port 监听端口(UDP)
; port = 9000

# latency 延迟, 单位毫秒
latency = 100

# passphrase 传输加密密码,至少10位
# obs加密推流格式 srt://192.168.0.4:9000?streamid=h=192.168.0.4,r=/live/srt1,m=publish&passphrase=0123456789
# 编码器有 SRT加密密码：选项的直接填入相同密码,流地址不加 &passphrase=0123456789
passphrase =

[rtsp]
# port rtsp协议tcp端口, ffmpeg,vlc等播放器默认使用tcp传输协议,udp传输rtp媒体数据
# ffmpeg 使用 -rtsp_transport tcp 则rtsp协议和rtp数据都通过单一tcp端口传输
# vlc 使用命令行加参数设置tcp传输  /usr/bin/vlc --rtsp-tcp rtsp://localhost/live/2
# 使用tcp传输的好处是 1:单一网络端口开放, 2:公网传输不花屏
# 对应播放和推流地址规范与rtmp一样, 也支持鉴权参数
# rtsp://localhost/live/stream
# rtsp://localhost/live/stream?sign=1671694080-64669b5d4b147ac09dc6ec42ef79815d
# 支持h264/h265+aac/opus/g.711 编码
# 推流和播放h265无需像rtmp和http-flv打补丁
; port = 554

# RTP port , RTP通过UDP传输时,复用该端口, 该端口必须是偶数
rtp_port = 8002

# RTCP port, RTCP通过UDP传输时,复用该端口, 该端口比RTP_PORT大1
rtcp_port = 8003

[webrtc]
# WebRTC-HTTP ingestion protocol (WHIP) https://www.ietf.org/archive/id/draft-ietf-wish-whip-09.html
# WebRTC-HTTP Egress Protocol (WHEP) https://www.ietf.org/archive/id/draft-murillo-whep-02.html
# 使用whip和whep标准协议实现webrtc直接推流和播放, 信令使用http,https端口通信
# 请求地址格式为:
# 推流 -- http://server_ip:8000/live/stream.whip
# 播流 -- http://server_ip:8000/live/stream.whip

# ip 服务部署在公网,设置公网IP地址,内网就填内网ip,使用此IP地址直接进行通讯, 如不设置使用stun识别
ip = 
# port ice监听复用端口,设置后开启服务,此端口用于传输媒体数据,单端口tcp/udp,注意开启防火墙
; port = 10000
# ice_tcp ice是否通过tcp传输, Chrome支持\OBS不支持
ice_tcp = 0
# stun 服务器地址, 多个服务器地址用 | 分割
stun = stun:stun.l.google.com:19302

[cluster]
# 快速配置集群
# type 集群类型
# pull型, 该服务为edge, 按需去中心拉取
# push型, 该服务为centre, 主动推到边缘
; type = pull
# node 远端节点,需设置协议头,ip地址,端口号, 对接NMS可以用kmp协议
; node = rtmp://192.168.0.2:1935
# args 参数
args = 